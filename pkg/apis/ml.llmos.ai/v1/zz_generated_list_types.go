/*
Copyright 2025 llmos.ai.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by main. DO NOT EDIT.

// +k8s:deepcopy-gen=package
// +groupName=ml.llmos.ai
package v1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// DatasetList is a list of Dataset resources
type DatasetList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata"`

	Items []Dataset `json:"items"`
}

func NewDataset(namespace, name string, obj Dataset) *Dataset {
	obj.APIVersion, obj.Kind = SchemeGroupVersion.WithKind("Dataset").ToAPIVersionAndKind()
	obj.Name = name
	obj.Namespace = namespace
	return &obj
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// DatasetVersionList is a list of DatasetVersion resources
type DatasetVersionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata"`

	Items []DatasetVersion `json:"items"`
}

func NewDatasetVersion(namespace, name string, obj DatasetVersion) *DatasetVersion {
	obj.APIVersion, obj.Kind = SchemeGroupVersion.WithKind("DatasetVersion").ToAPIVersionAndKind()
	obj.Name = name
	obj.Namespace = namespace
	return &obj
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// LocalModelList is a list of LocalModel resources
type LocalModelList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata"`

	Items []LocalModel `json:"items"`
}

func NewLocalModel(namespace, name string, obj LocalModel) *LocalModel {
	obj.APIVersion, obj.Kind = SchemeGroupVersion.WithKind("LocalModel").ToAPIVersionAndKind()
	obj.Name = name
	obj.Namespace = namespace
	return &obj
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// LocalModelVersionList is a list of LocalModelVersion resources
type LocalModelVersionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata"`

	Items []LocalModelVersion `json:"items"`
}

func NewLocalModelVersion(namespace, name string, obj LocalModelVersion) *LocalModelVersion {
	obj.APIVersion, obj.Kind = SchemeGroupVersion.WithKind("LocalModelVersion").ToAPIVersionAndKind()
	obj.Name = name
	obj.Namespace = namespace
	return &obj
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// ModelList is a list of Model resources
type ModelList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata"`

	Items []Model `json:"items"`
}

func NewModel(namespace, name string, obj Model) *Model {
	obj.APIVersion, obj.Kind = SchemeGroupVersion.WithKind("Model").ToAPIVersionAndKind()
	obj.Name = name
	obj.Namespace = namespace
	return &obj
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// ModelServiceList is a list of ModelService resources
type ModelServiceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata"`

	Items []ModelService `json:"items"`
}

func NewModelService(namespace, name string, obj ModelService) *ModelService {
	obj.APIVersion, obj.Kind = SchemeGroupVersion.WithKind("ModelService").ToAPIVersionAndKind()
	obj.Name = name
	obj.Namespace = namespace
	return &obj
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// NotebookList is a list of Notebook resources
type NotebookList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata"`

	Items []Notebook `json:"items"`
}

func NewNotebook(namespace, name string, obj Notebook) *Notebook {
	obj.APIVersion, obj.Kind = SchemeGroupVersion.WithKind("Notebook").ToAPIVersionAndKind()
	obj.Name = name
	obj.Namespace = namespace
	return &obj
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// RegistryList is a list of Registry resources
type RegistryList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata"`

	Items []Registry `json:"items"`
}

func NewRegistry(namespace, name string, obj Registry) *Registry {
	obj.APIVersion, obj.Kind = SchemeGroupVersion.WithKind("Registry").ToAPIVersionAndKind()
	obj.Name = name
	obj.Namespace = namespace
	return &obj
}
