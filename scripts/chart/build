#!/usr/bin/env bash
set -e

echo "--- Starting the build process for llmos-operator charts ---"

TOP_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )/../.." &> /dev/null && pwd )"
LLMOS_CHARTS_DIR=${LLMOS_CHARTS_DIR:-deploy/charts}
CHART_REPO=${CHART_REPO:-dev}

cd "${TOP_DIR}"
. ./scripts/version

CHART_DIST_DIR=${CHART_DIST_DIR:-dist/llmos-charts}
## create dist dir if not exist
if [ ! -d "${CHART_DIST_DIR}" ]; then
  mkdir -p "dist"
else
  rm -rf "${CHART_DIST_DIR}"
fi


cp -rf "${LLMOS_CHARTS_DIR}" "${CHART_DIST_DIR}"

function updateImageConfig() {
    # Split the string by '/' using IFS
    IFS='/' read -r part1 part2 <<< "$REGISTRY"

    # Check if there are exactly two parts
    if [ -n "$part1" ] && [ -n "$part2" ]; then
      # Save the parts as reusable variables
      registry="$part1"
      repository="$part2"

      # Use the variables later in the script
      echo "REGISTRY: $registry"
      echo "REPOSITORY: $repository"
    else
      echo "Error: registry does not contain exactly two parts separated by '/'."
      exit 1
    fi

    # Update pullPolicy to IfNotPresent
    # Step 1: Convert YAML to JSON
    chart_path=$1
    cd "${chart_path}"
    yq eval -o=json values.yaml > values.json

    # Step 2: Use jq to update image config
    jq --arg tag "$TAG" \
      --arg registry "$registry" \
      --arg repository "$repository" \
      'walk(
        if type == "object" then
          if has("registry") then
            .registry = $registry
          else
            .
          end |
          if has("pullPolicy") and .pullPolicy == "Always" then
            .pullPolicy = "IfNotPresent"
          else
            .
          end |
          if has("repository") and .repository == "llmos-ai/llmos-operator"  then
            .repository = $repository + "/llmos-operator"
          elif has("repository") and .repository == "llmos-ai/llmos-operator-webhook"  then
            .repository = $repository + "/llmos-operator-webhook"
          elif has("repository") and .repository == "llmos-ai/system-charts-repo"  then
            .repository = $repository + "/system-charts-repo"
          else
            .
          end |
          if has("tag") and .tag == "main-head" then
            .tag = $tag
          else
            .
          end
        else
          .
        end
      )' values.json > values-updated.json

    # Step 3: Convert JSON back to YAML
    yq eval -P values-updated.json -o yaml > values.yaml
    rm -f values.json values-updated.json
}

function patchChartVersion() {
    sed -i -e "s/0.1.0-dev/${CHART_VERSION}/g" "${llmos_crd_chart_path}/Chart.yaml"
    sed -i -e "s/0.1.0-app.dev/${APP_VERSION}/g" "${llmos_crd_chart_path}/Chart.yaml"
    sed -i -e "s/0.1.0-dev/${CHART_VERSION}/g" "${llmos_operator_chart_path}/Chart.yaml"
    sed -i -e "s/0.1.0-app.dev/${APP_VERSION}/g" "${llmos_operator_chart_path}/Chart.yaml"

    rm -f "${llmos_crd_chart_path}/Chart.yaml-e"
    rm -f "${llmos_operator_chart_path}/Chart.yaml-e"
}

# package llmos-operator chart
llmos_crd_chart_path=${CHART_DIST_DIR}/llmos-crd
llmos_operator_chart_path=${CHART_DIST_DIR}/llmos-operator


patchChartVersion
updateImageConfig "${llmos_operator_chart_path}"
cd "${TOP_DIR}"

./scripts/chart/check "${LLMOS_CHARTS_DIR}"

helm lint "${llmos_crd_chart_path}"
helm lint "${llmos_operator_chart_path}"

helm package ${llmos_crd_chart_path} -d ${CHART_DIST_DIR} || true
helm package ${llmos_operator_chart_path} -d ${CHART_DIST_DIR} || true

echo "Building new helm chart ${CHART_REPO} repo index:"
curl -H "Cache-Control: no-cache" -fL "https://releases.1block.ai/charts/${CHART_REPO}/index.yaml" -o "${CHART_DIST_DIR}"/index.yaml

helm repo index --merge "${CHART_DIST_DIR}"/index.yaml ${CHART_DIST_DIR} || true

# Clean up the build
rm -rf ${llmos_crd_chart_path} ${llmos_operator_chart_path}
rm -rf ${CHART_DIST_DIR}/system-charts

echo "Build llmos-operator charts completed successfully."
